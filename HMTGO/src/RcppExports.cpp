// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// MAC
NumericMatrix MAC(List treedata);
RcppExport SEXP HMTGO_MAC(SEXP treedataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type treedata(treedataSEXP);
    rcpp_result_gen = Rcpp::wrap(MAC(treedata));
    return rcpp_result_gen;
END_RCPP
}
// tree_transformation
Rcpp::List tree_transformation(Rcpp::List children_db, Rcpp::List genes_db, std::string root);
RcppExport SEXP HMTGO_tree_transformation(SEXP children_dbSEXP, SEXP genes_dbSEXP, SEXP rootSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type children_db(children_dbSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genes_db(genes_dbSEXP);
    Rcpp::traits::input_parameter< std::string >::type root(rootSEXP);
    rcpp_result_gen = Rcpp::wrap(tree_transformation(children_db, genes_db, root));
    return rcpp_result_gen;
END_RCPP
}
// getPDEC
NumericVector getPDEC(NumericVector condProb, NumericVector parentIndex, NumericMatrix componMappingMat, List sepLocation, List formula);
RcppExport SEXP HMTGO_getPDEC(SEXP condProbSEXP, SEXP parentIndexSEXP, SEXP componMappingMatSEXP, SEXP sepLocationSEXP, SEXP formulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type condProb(condProbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parentIndex(parentIndexSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type componMappingMat(componMappingMatSEXP);
    Rcpp::traits::input_parameter< List >::type sepLocation(sepLocationSEXP);
    Rcpp::traits::input_parameter< List >::type formula(formulaSEXP);
    rcpp_result_gen = Rcpp::wrap(getPDEC(condProb, parentIndex, componMappingMat, sepLocation, formula));
    return rcpp_result_gen;
END_RCPP
}
// HMTEMC
List HMTEMC(Function optim_R, Function likelihoodfunc_Alt, Function likelihoodfunc_Null, NumericVector init, NumericVector pval, NumericVector depth, NumericVector leaf, NumericVector nonleaf, NumericMatrix childrenIndexMat, NumericVector propInParent, NumericVector childrenCount, NumericVector parentIndex, int nDAG, double betaTemp, std::string null_dist, bool penalty, std::string num_method, int max_it, int innerit, double conv_threshold);
RcppExport SEXP HMTGO_HMTEMC(SEXP optim_RSEXP, SEXP likelihoodfunc_AltSEXP, SEXP likelihoodfunc_NullSEXP, SEXP initSEXP, SEXP pvalSEXP, SEXP depthSEXP, SEXP leafSEXP, SEXP nonleafSEXP, SEXP childrenIndexMatSEXP, SEXP propInParentSEXP, SEXP childrenCountSEXP, SEXP parentIndexSEXP, SEXP nDAGSEXP, SEXP betaTempSEXP, SEXP null_distSEXP, SEXP penaltySEXP, SEXP num_methodSEXP, SEXP max_itSEXP, SEXP inneritSEXP, SEXP conv_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type optim_R(optim_RSEXP);
    Rcpp::traits::input_parameter< Function >::type likelihoodfunc_Alt(likelihoodfunc_AltSEXP);
    Rcpp::traits::input_parameter< Function >::type likelihoodfunc_Null(likelihoodfunc_NullSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pval(pvalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type leaf(leafSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nonleaf(nonleafSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type childrenIndexMat(childrenIndexMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type propInParent(propInParentSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type childrenCount(childrenCountSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parentIndex(parentIndexSEXP);
    Rcpp::traits::input_parameter< int >::type nDAG(nDAGSEXP);
    Rcpp::traits::input_parameter< double >::type betaTemp(betaTempSEXP);
    Rcpp::traits::input_parameter< std::string >::type null_dist(null_distSEXP);
    Rcpp::traits::input_parameter< bool >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< std::string >::type num_method(num_methodSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type innerit(inneritSEXP);
    Rcpp::traits::input_parameter< double >::type conv_threshold(conv_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(HMTEMC(optim_R, likelihoodfunc_Alt, likelihoodfunc_Null, init, pval, depth, leaf, nonleaf, childrenIndexMat, propInParent, childrenCount, parentIndex, nDAG, betaTemp, null_dist, penalty, num_method, max_it, innerit, conv_threshold));
    return rcpp_result_gen;
END_RCPP
}
// getNegNullLlikeC
double getNegNullLlikeC(NumericVector x, NumericVector pval, NumericVector weight, double m_c);
RcppExport SEXP HMTGO_getNegNullLlikeC(SEXP xSEXP, SEXP pvalSEXP, SEXP weightSEXP, SEXP m_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pval(pvalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< double >::type m_c(m_cSEXP);
    rcpp_result_gen = Rcpp::wrap(getNegNullLlikeC(x, pval, weight, m_c));
    return rcpp_result_gen;
END_RCPP
}
// getNegAltLlikeC
double getNegAltLlikeC(NumericVector x, NumericVector pval, NumericVector weight, bool penalty);
RcppExport SEXP HMTGO_getNegAltLlikeC(SEXP xSEXP, SEXP pvalSEXP, SEXP weightSEXP, SEXP penaltySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pval(pvalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< bool >::type penalty(penaltySEXP);
    rcpp_result_gen = Rcpp::wrap(getNegAltLlikeC(x, pval, weight, penalty));
    return rcpp_result_gen;
END_RCPP
}
// HMT_DAEMC
List HMT_DAEMC(NumericVector pval, List treedata, Function optim_R, Function likelihoodfunc_Alt, Function likelihoodfunc_Null, NumericVector schedule, NumericVector init_origin, bool penalty, std::string null_dist, std::string num_method, int iternum_final, int iternum_hot, int iternum_inner, double conv_threshold);
RcppExport SEXP HMTGO_HMT_DAEMC(SEXP pvalSEXP, SEXP treedataSEXP, SEXP optim_RSEXP, SEXP likelihoodfunc_AltSEXP, SEXP likelihoodfunc_NullSEXP, SEXP scheduleSEXP, SEXP init_originSEXP, SEXP penaltySEXP, SEXP null_distSEXP, SEXP num_methodSEXP, SEXP iternum_finalSEXP, SEXP iternum_hotSEXP, SEXP iternum_innerSEXP, SEXP conv_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pval(pvalSEXP);
    Rcpp::traits::input_parameter< List >::type treedata(treedataSEXP);
    Rcpp::traits::input_parameter< Function >::type optim_R(optim_RSEXP);
    Rcpp::traits::input_parameter< Function >::type likelihoodfunc_Alt(likelihoodfunc_AltSEXP);
    Rcpp::traits::input_parameter< Function >::type likelihoodfunc_Null(likelihoodfunc_NullSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type schedule(scheduleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init_origin(init_originSEXP);
    Rcpp::traits::input_parameter< bool >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< std::string >::type null_dist(null_distSEXP);
    Rcpp::traits::input_parameter< std::string >::type num_method(num_methodSEXP);
    Rcpp::traits::input_parameter< int >::type iternum_final(iternum_finalSEXP);
    Rcpp::traits::input_parameter< int >::type iternum_hot(iternum_hotSEXP);
    Rcpp::traits::input_parameter< int >::type iternum_inner(iternum_innerSEXP);
    Rcpp::traits::input_parameter< double >::type conv_threshold(conv_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(HMT_DAEMC(pval, treedata, optim_R, likelihoodfunc_Alt, likelihoodfunc_Null, schedule, init_origin, penalty, null_dist, num_method, iternum_final, iternum_hot, iternum_inner, conv_threshold));
    return rcpp_result_gen;
END_RCPP
}
